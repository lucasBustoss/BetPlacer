// <auto-generated />
using System;
using BetPlacer.Backtest.API.Config;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BetPlacer.Backtest.API.Migrations
{
    [DbContext(typeof(BacktestDbContext))]
    [Migration("20240609125910_AddFlagFixture")]
    partial class AddFlagFixture
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BetPlacer.Backtest.API.Models.Entities.BacktestFilterModel", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<int>("BacktestCode")
                        .HasColumnType("integer")
                        .HasColumnName("backtest_code");

                    b.Property<int>("CompareType")
                        .HasColumnType("integer")
                        .HasColumnName("compare_type");

                    b.Property<double>("FinalValue")
                        .HasColumnType("double precision")
                        .HasColumnName("final_value");

                    b.Property<double>("InitialValue")
                        .HasColumnType("double precision")
                        .HasColumnName("initial_value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PropType")
                        .HasColumnType("integer")
                        .HasColumnName("prop_type");

                    b.Property<int>("TeamType")
                        .HasColumnType("integer")
                        .HasColumnName("team_type");

                    b.Property<bool>("UsesInFixture")
                        .HasColumnType("boolean")
                        .HasColumnName("uses_in_fixture");

                    b.HasKey("Code")
                        .HasName("p_k_backtest_filters");

                    b.HasIndex("BacktestCode");

                    b.ToTable("backtest_filters");
                });

            modelBuilder.Entity("BetPlacer.Backtest.API.Models.Entities.BacktestModel", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<double>("FilteredFixtures")
                        .HasColumnType("double precision")
                        .HasColumnName("filtered_fixtures");

                    b.Property<double>("MatchedFixtures")
                        .HasColumnType("double precision")
                        .HasColumnName("matched_fixtures");

                    b.Property<int>("MaxBadRun")
                        .HasColumnType("integer")
                        .HasColumnName("max_bad_run");

                    b.Property<int>("MaxGoodRun")
                        .HasColumnType("integer")
                        .HasColumnName("max_good_run");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("TeamType")
                        .HasColumnType("integer")
                        .HasColumnName("team_type");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Code")
                        .HasName("p_k_backtest");

                    b.ToTable("backtest");
                });

            modelBuilder.Entity("BetPlacer.Backtest.API.Models.Entities.LeagueBacktestModel", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<int>("BacktestCode")
                        .HasColumnType("integer")
                        .HasColumnName("backtest_code");

                    b.Property<int>("LeagueCode")
                        .HasColumnType("integer")
                        .HasColumnName("league_code");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("league_name");

                    b.Property<double>("LeagueRatio")
                        .HasColumnType("double precision")
                        .HasColumnName("league_ratio");

                    b.HasKey("Code")
                        .HasName("p_k_backtest_leagues_list");

                    b.HasIndex("BacktestCode");

                    b.ToTable("backtest_leagues_list");
                });

            modelBuilder.Entity("BetPlacer.Backtest.API.Models.Entities.LeagueSeasonBacktestModel", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<int>("BacktestCode")
                        .HasColumnType("integer")
                        .HasColumnName("backtest_code");

                    b.Property<int>("LeagueCode")
                        .HasColumnType("integer")
                        .HasColumnName("league_code");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("league_name");

                    b.Property<int>("LeagueSeasonCode")
                        .HasColumnType("integer")
                        .HasColumnName("league_season_code");

                    b.Property<double>("LeagueSeasonRatio")
                        .HasColumnType("double precision")
                        .HasColumnName("league_season_ratio");

                    b.Property<string>("LeagueSeasonYear")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("league_season_year");

                    b.HasKey("Code")
                        .HasName("p_k_backtest_league_seasons_list");

                    b.HasIndex("BacktestCode");

                    b.ToTable("backtest_league_seasons_list");
                });

            modelBuilder.Entity("BetPlacer.Backtest.API.Models.Entities.TeamBacktestModel", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<int>("BacktestCode")
                        .HasColumnType("integer")
                        .HasColumnName("backtest_code");

                    b.Property<int>("TeamCode")
                        .HasColumnType("integer")
                        .HasColumnName("team_code");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("team_name");

                    b.Property<double>("TeamRatio")
                        .HasColumnType("double precision")
                        .HasColumnName("team_ratio");

                    b.HasKey("Code")
                        .HasName("p_k_backtest_teams_list");

                    b.HasIndex("BacktestCode");

                    b.ToTable("backtest_teams_list");
                });

            modelBuilder.Entity("BetPlacer.Backtest.API.Models.Entities.BacktestFilterModel", b =>
                {
                    b.HasOne("BetPlacer.Backtest.API.Models.Entities.BacktestModel", "Backtest")
                        .WithMany("Filters")
                        .HasForeignKey("BacktestCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_backtest_filters__backtest_backtest_code");

                    b.Navigation("Backtest");
                });

            modelBuilder.Entity("BetPlacer.Backtest.API.Models.Entities.LeagueBacktestModel", b =>
                {
                    b.HasOne("BetPlacer.Backtest.API.Models.Entities.BacktestModel", "Backtest")
                        .WithMany("Leagues")
                        .HasForeignKey("BacktestCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_backtest_leagues_list_backtest_backtest_code");

                    b.Navigation("Backtest");
                });

            modelBuilder.Entity("BetPlacer.Backtest.API.Models.Entities.LeagueSeasonBacktestModel", b =>
                {
                    b.HasOne("BetPlacer.Backtest.API.Models.Entities.BacktestModel", "Backtest")
                        .WithMany("LeagueSeasons")
                        .HasForeignKey("BacktestCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_backtest_league_seasons_list_backtest_backtest_code");

                    b.Navigation("Backtest");
                });

            modelBuilder.Entity("BetPlacer.Backtest.API.Models.Entities.TeamBacktestModel", b =>
                {
                    b.HasOne("BetPlacer.Backtest.API.Models.Entities.BacktestModel", "Backtest")
                        .WithMany("Teams")
                        .HasForeignKey("BacktestCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_backtest_teams_list_backtest_backtest_code");

                    b.Navigation("Backtest");
                });

            modelBuilder.Entity("BetPlacer.Backtest.API.Models.Entities.BacktestModel", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("LeagueSeasons");

                    b.Navigation("Leagues");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
