// <auto-generated />
using BetPlacer.Punter.API.Config;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BetPlacer.Punter.API.Migrations
{
    [DbContext(typeof(PunterDbContext))]
    [Migration("20240629171034_ChangeFixtureStrategyTableName")]
    partial class ChangeFixtureStrategyTableName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BetPlacer.Punter.API.Models.Entities.FixtureStrategyModel", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<int>("FixtureCode")
                        .HasColumnType("integer")
                        .HasColumnName("fixture_code");

                    b.Property<string>("StrategyName")
                        .HasColumnType("text")
                        .HasColumnName("strategy_name");

                    b.HasKey("Code")
                        .HasName("p_k_fixture_strategy");

                    b.ToTable("fixture_strategy");
                });

            modelBuilder.Entity("BetPlacer.Punter.API.Models.Entities.PunterBacktestClassificationModel", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("classification");

                    b.Property<int>("PunterBacktestCode")
                        .HasColumnType("integer")
                        .HasColumnName("punter_backtest_code");

                    b.HasKey("Code")
                        .HasName("p_k_punter_backtest_classification");

                    b.ToTable("punter_backtest_classification");
                });

            modelBuilder.Entity("BetPlacer.Punter.API.Models.Entities.PunterBacktestCombinedIntervalModel", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<double>("CoefficientVariation")
                        .HasColumnType("double precision")
                        .HasColumnName("coefficient_variation");

                    b.Property<double>("InferiorLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("inferior_limit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("PercentMatches")
                        .HasColumnType("double precision")
                        .HasColumnName("percent_matches");

                    b.Property<int>("PunterBacktestCode")
                        .HasColumnType("integer")
                        .HasColumnName("punter_backtest_code");

                    b.Property<double>("Result")
                        .HasColumnType("double precision")
                        .HasColumnName("result");

                    b.HasKey("Code")
                        .HasName("p_k_punter_backtest_combined_interval");

                    b.ToTable("punter_backtest_combined_interval");
                });

            modelBuilder.Entity("BetPlacer.Punter.API.Models.Entities.PunterBacktestIntervalModel", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<double>("CoefficientVariation")
                        .HasColumnType("double precision")
                        .HasColumnName("coefficient_variation");

                    b.Property<double>("FinalValue")
                        .HasColumnType("double precision")
                        .HasColumnName("final_value");

                    b.Property<double>("InferiorLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("inferior_limit");

                    b.Property<double>("InitialValue")
                        .HasColumnType("double precision")
                        .HasColumnName("initial_value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PunterBacktestCode")
                        .HasColumnType("integer")
                        .HasColumnName("punter_backtest_code");

                    b.HasKey("Code")
                        .HasName("p_k_punter_backtest_interval");

                    b.ToTable("punter_backtest_interval");
                });

            modelBuilder.Entity("BetPlacer.Punter.API.Models.Entities.PunterBacktestModel", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("LeagueCode")
                        .HasColumnType("integer")
                        .HasColumnName("league_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("ResultAfterClassification")
                        .HasColumnType("double precision")
                        .HasColumnName("result_after_classification");

                    b.HasKey("Code")
                        .HasName("p_k_punter_backtest");

                    b.ToTable("punter_backtest");
                });
#pragma warning restore 612, 618
        }
    }
}
